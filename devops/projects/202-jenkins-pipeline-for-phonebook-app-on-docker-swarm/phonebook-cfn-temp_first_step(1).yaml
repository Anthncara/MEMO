AWSTemplateFormatVersion: 2010-09-09
Description: |
  Testing
Parameters:
  KeyPairName:
    Description: Enter your Key pair name for SSH connection
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be one of the existing EC2 KeyPair
  
Resources:
  InstanceConnectPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument: #required
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ec2-instance-connect:SendSSHPublicKey
            Resource:
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
            Condition: {"StringEquals": {"aws:ResourceTag/project": "203"}}
          - Effect: Allow
            Action:
              - ec2:DescribeInstances
            Resource: "*"
  EC2InstanceConnect:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com 
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref InstanceConnectPolicy
  EC2ConnectProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles: #required
        - !Ref EC2InstanceConnect
  DockerMachinesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP for Docker Machines
      SecurityGroupIngress:
        - IpProtocol: -1 #It means from anywhere
          FromPort: 0 # It means all ports
          ToPort: 65535 # open anyone
          CidrIp: 0.0.0.0/0
  DockerManager1:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyPairName
      ImageId: ami-0947d2ba12ee1ff75
      InstanceType: t2.micro
      IamInstanceProfile: !Ref EC2ConnectProfile
      SecurityGroupIds:
        - !GetAtt DockerMachinesSecurityGroup.GroupId
      UserData: 
        Fn::Base64: 
          !Sub |
            #! /bin/bash
            yum update -y
            hostnamectl set-hostname Docker-Master
            amazon-linux-extras install docker -y
            systemctl start docker
            systemctl enable docker
            usermod -a -G docker ec2-user
            curl -L "https://github.com/docker/compose/release/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" \
            -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose

      Tags:
        - Key: Name
          Value: !Sub Docker Master of ${AWS::StackName}
        - Key: project
          Value: "203"
  DockerWorker1:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyPairName
      ImageId: ami-0947d2ba12ee1ff75
      InstanceType: t2.micro
      IamInstanceProfile: !Ref EC2ConnectProfile
      SecurityGroupIds:
        - !GetAtt DockerMachinesSecurityGroup.GroupId
      UserData: 
        Fn::Base64: 
          !Sub |
            #! /bin/bash
            yum update -y
            hostnamectl set-hostname Docker-Worker
            amazon-linux-extras install docker -y
            systemctl start docker
            systemctl enable docker
            usermod -a -G docker ec2-user
            curl -L "https://github.com/docker/compose/release/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" \
            -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
      Tags:
        - Key: Name
          Value: !Sub Docker Worker of ${AWS::StackName}
        - Key: project
          Value: "203"
Outputs:
  DockerManagerDNSName:
    Description: Docker Manager DNS Name
    Value: !Sub 
      - ${PublicAddress}
      - PublicAddress: !GetAtt DockerManager1.PublicDnsName
  DockerWorkerDNSName:
    Description: Docker Worker DNS Name
    Value: !Sub 
      - ${PublicAddress}
      - PublicAddress: !GetAtt DockerWorker1.PublicDnsName